{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","preventDefault","state","target","name","value","setState","openNetlifyPopup","window","open","gitURL","openHerokuPopup","openZeitPopup","isPoppedOut","react_default","a","createElement","className","Row","Col","md","InputGroup","InputGroupAddon","addonType","Input","onChange","placeholder","onClick","src","alt","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.755a3f8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Row, Col, InputGroup, InputGroupAddon, Input } from 'reactstrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      \n                    isPoppedOut: true,\n                    gitURL: '',\n\n                 };\n  }\n\n  onChangeHandler = (e) =>\n  {\n        e.preventDefault();\n        const state = this.state\n        state[e.target.name] = e.target.value;\n        this.setState(state);\n  }\n\n  openNetlifyPopup = () => {\n    var windowObjectReference = window.open(\n      \"https://app.netlify.com/start/deploy?repository=\" + this.state.gitURL,\n      \"DescriptiveWindowName\",\n      \"top=150,left=500,height=500,width=500,resizable,scrollbars,status\"\n    );\n  }\n\n  openHerokuPopup = () =>\n  {\n    var windowObjectReference = window.open(\n      \"https://heroku.com/deploy?template=\" + this.state.gitURL,\n      \"DescriptiveWindowName\",\n      \"top=150,left=500,height=500,width=500,resizable,scrollbars,status\"\n    );\n  }\n  openZeitPopup = () =>\n  {\n    var windowObjectReference = window.open(\n      \"https://zeit.co/new#import-github\",\n      \"DescriptiveWindowName\",\n      \"top=150,left=500,height=500,width=500,resizable,scrollbars,status\"\n    );\n  }\n\n  render(){\n    return(\n<div className='container'>\n<Row>\n<Col md='12' className='margin'>\n<h2>Deploy to Netlify and Heroku</h2>\n</Col>\n</Row>\n<Row>\n<Col md='9' className='margin'>\n<div>Enter Git repo URL below and click any button to deploy</div><br/>\n<InputGroup>\n<InputGroupAddon addonType=\"prepend\">URL to a GitHub repo</InputGroupAddon>\n<Input onChange={this.onChangeHandler} name='gitURL' placeholder='https://github.com/username/project_name' />\n</InputGroup>\n</Col>\n</Row>\n<br/>\n<Row>\n  <Col md='3' className='margin margin-left'>\n  <div onClick={this.openNetlifyPopup}>\n  <img src=\"https://www.netlify.com/img/deploy/button.svg\" alt=\"Deploy to Netlify\" className='pointer' />\n</div>\n  </Col>\n  <Col md='3' className='margin'>\n  <div onClick={this.openHerokuPopup}>\n  <img src=\"https://www.herokucdn.com/deploy/button.svg\" alt=\"Deploy to Heroku\"  className='pointer' />\n</div>\n  </Col>\n  <Col md='2' className='margin'>\n  <div onClick={this.openZeitPopup}>\n  <img src=\"https://deploy.now.sh/static/button.svg\" alt=\"Deploy to Zeit\" className='pointer' />\n</div>\n  </Col>\n</Row>\n<Row>\n<Col md='10'>\n<br /><br /><br /><b>Note: </b><br /><br /><p>In case of Heroku deployment, add <code>app.json</code> file in the root of your Git repo and modify <code>package.json</code> file accordingly. Check this <a href=\"https://github.com/heroku/node-js-sample\" target='_blank'>sample git repo</a> for details.</p>\n{/* <p>2. In case of Now deployment, add <code>now.json</code> file in the root of your Git repo, read more about it <a href=\"https://zeit.co/docs/v2/advanced/configuration\">here</a></p> */}\n\n</Col>\n</Row>\n\n\n\n</div>\n    )\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}